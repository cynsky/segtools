% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/segTraj_hybrid_simultanee.R
\name{hybrid_simultanee}
\alias{hybrid_simultanee}
\title{\code{hybrid_simultanee} performs a simultaneous seg - clustering for bivariate signals.}
\usage{
hybrid_simultanee(x, P, Kmax, lmin = 3, sameSigma = TRUE,
  sameVar.init = FALSE, eps = 1e-06, lissage = T, pureR = F)
}
\arguments{
\item{x}{the two-dimensionnal signal, one line per dimension}

\item{P}{the number of classes}

\item{Kmax}{the maximal number of segments}

\item{lmin}{minimum length of segment}

\item{sameSigma}{should segment have the same variance}

\item{sameVar.init}{sameVar.init}

\item{eps}{eps}

\item{lissage}{should likelihood be smoothed}

\item{pureR}{should algorithm run in full R or use Rcpp speed improvements}
}
\value{
a list with Linc, the incomplete loglikelihood =Linc,param=paramtau posterior probability
}
\description{
It is an algorithm which combines dynamic programming
and the EM algorithm to calculate the MLE of phi and T, which
are the mixture parameters and the change point instants.
this algorithm is run for a given number of clusters,
and estimates the parameters for a segmentation/clustering
model with P clusters and 1:Kmax segments
}
\examples{
K  <- 5; rupt <- sample(1:20, K+1, replace=TRUE); rupt <- cumsum(rupt);
n <- max(rupt)
muSim <- matrix(stats::rnorm(2*K+2,  mean=20, sd=5), nrow=2)
muSim <- apply(muSim,1, cumsum)
muSim <- t(muSim)
sdSim <- matrix(sqrt(1/rgamma(2*K+2, shape = 10, rate = 10)), nrow=2)
print(muSim)
pos <- lapply(1:(K+1), function(d) 1*(rupt[d]<(1:n )))
pos <- Reduce('+', x=pos)+1
x <- matrix(stats::rnorm(2*length(pos), mean=muSim[,pos], sd=sdSim[,pos]), nrow=2)
bisig_plot(x = x)
n  = dim(x)[2]
res <- hybrid_simultanee(x, P=2, Kmax=10)
Kopt=5
param <- res$param[[Kopt]]
bisig_plot(x = x, rupt = param$rupt, mu=param$phi$mu )
}
